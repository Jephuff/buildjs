const path = require('path');
const lodash = require('lodash');

const normalizeQueryParam = (p, loader, prefix) => {
  const parts = p.split('/');

  return parts.length > 1
    ? `${parts[0]}/${[loader, prefix, parts[1]].join('-')}`
    : [loader, prefix, parts[0]].join('-');
};

const extractQuery = item => {
  if (item.query) {
    const presets = (item.query.presets || [])
      .map(p => normalizeQueryParam(p, item.loader, 'preset'));
    const plugins = (item.query.plugins || [])
      .map(p => normalizeQueryParam(p, item.loader, 'plugin'));
    return presets.concat(plugins);
  }

  return [];
};

const extractLoaders = item => {
  let loaders = [];
  if (item.loader) {
    loaders = loaders.concat(item.loader.split('!'));
  } else if (item.loaders) {
    loaders = loaders.concat(item.loaders);
  }

  return loaders;
};

const stripQueryParameter = loader => {
  const index = loader.indexOf('?');
  return index === -1 ? loader : loader.substring(0, index);
};

const normalizeLoader = loader => (
  `${loader.split('-')[0]}-loader`
);

function getLoaders(deps, loaders) {
  const ls = lodash(loaders || [])
    .map(extractLoaders)
    .flatten()
    .map(loader => stripQueryParameter(loader))
    .map(loader => normalizeLoader(loader))
    .filter(Boolean)
    .uniq()
    .value();

  const qs = lodash(loaders || [])
    .map(extractQuery)
    .flatten()
    .filter(Boolean)
    .uniq()
    .value();

  return ls.concat(qs);
}

const webpack = (content, filename, deps, rootDir) => {
  if (
    path.basename(rootDir).includes('webpack-config')
    && path.extname(filename) === '.js'
  ) {
    const module = require(path.resolve(filename)).module || {}; // eslint-disable-line global-require
    const loaders = getLoaders(deps, module.loaders);
    const preLoaders = getLoaders(deps, module.preLoaders);
    const postLoaders = getLoaders(deps, module.postLoaders);
    return loaders.concat(preLoaders).concat(postLoaders);
  }

  return [];
};

module.exports = webpack;
